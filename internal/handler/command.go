package handler

import (
	"log"

	tele "gopkg.in/telebot.v4"
)

func (h *Handler) MsgHandler(c tele.Context) error {
	msg := c.Message()
	user := msg.Sender
	mainChatID := h.cfg.ChatId

	if msg.Chat.ID != mainChatID {
		return h.handleUserMessage(c, user, msg, mainChatID)
	}
	return h.handleMainChatMessage(msg, mainChatID)
}

func (h *Handler) HandleStart(c tele.Context) error {
	startText := "üìù–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –ú–ì–¢–£ ¬´–°–¢–ê–ù–ö–ò–ù¬ª."+
	"\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."+
	"\n\n‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –∑–∞–Ω–æ–≤–æ."
	return c.Send(startText)
}

func (h *Handler) handleUserMessage(c tele.Context, user *tele.User, msg *tele.Message, mainChatID int64) error {
	chat := &tele.Chat{ID: mainChatID}
	topicId := h.Repo.GetTopicId(user.ID)
	if topicId == 0 {
		topic := &tele.Topic{
			Name: user.FirstName,
		}

		newTopic, err := h.bot.CreateTopic(chat, topic)
		log.Println("newTopic", newTopic)
		log.Println(user)
		if err != nil {
			log.Printf("Failed to create topic: %v", err)
			return c.Send("Failed to create topic: " + err.Error())
		}

		h.Repo.CreateTopic(user.ID, newTopic.ThreadID)

		topicId = newTopic.ThreadID
	}

	_, err := h.bot.Forward(chat, msg, &tele.SendOptions{
		ThreadID: topicId,
	})

	if err != nil {
		log.Printf("Failed to forward message: %v", err)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	confirmationMsg := "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ."
	return c.Send(confirmationMsg)
}

func (h *Handler) handleMainChatMessage(msg *tele.Message, mainChatID int64) error {
	if msg.ThreadID == 0 {
		return nil
	}

	userId := h.Repo.GetUserId(msg.ThreadID)
	if userId == 0 {
		log.Printf("No user found for thread %d", msg.ThreadID)
		return nil
	}

	userChat := &tele.Chat{ID: userId}

	var media any

	switch {
	case msg.Text != "":
		media = msg.Text

	case msg.Photo != nil:
		photo := *msg.Photo
		photo.Caption = msg.Caption
		media = &photo

	case msg.Video != nil:
		video := *msg.Video
		video.Caption = msg.Caption
		media = &video

	case msg.Document != nil:
		doc := *msg.Document
		doc.Caption = msg.Caption
		media = &doc

	case msg.Audio != nil:
		audio := *msg.Audio
		audio.Caption = msg.Caption
		media = &audio

	case msg.Voice != nil:
		media = msg.Voice

	case msg.Sticker != nil:
		media = msg.Sticker

	case msg.Location != nil:
		media = msg.Location

	case msg.Contact != nil:
		media = msg.Contact

	case msg.Poll != nil:
		media = msg.Poll

	case msg.Animation != nil:
		anim := *msg.Animation
		anim.Caption = msg.Caption
		media = &anim

	default:
		log.Printf("Unsupported message type from thread %d", msg.ThreadID)
		return nil
	}

	_, err := h.bot.Send(userChat, media)
	return err
}
